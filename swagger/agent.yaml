swagger: '2.0'
info:
  description: >-
    SynergyCheck agent API received requests to update from SynergyCheck sensors
    and accumulates them and compresses them to report to the synergyCheck.com
    service
  version: 0.0.1
  title: SynergyCheck agent API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@synergyCheck.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: ___HOST_AND_PORT___
basePath: /api/v1
tags:
- name: agent
  description: agent is a server for the sensors
- name: sensor
  description: sensor facing API to receive updates
  externalDocs:
    description: Find out more
    url: 'http://synergyCheck.com/info'
schemes:
- https #___PROTOCOL___
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >
      For accessing the API a valid API token must be passed in all the web api call (except ping)
      in the 'Authorization' header.

      The following syntax must be passed in the 'Authorization' header

          Bearer yourApikey

      The apiKey is provided as part of the sensor configuration
security:
- Bearer: []
paths:
  /ping:
    get:
      tags:
      - agent
      summary: responds with time of day
      description: intended to indicate that agent is up and running
      x-swagger-router-controller: agentRoutes
      operationId: getPing
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Ping'
  /state:
    get:
      tags:
      - agent
      summary: responds with state of server
      description: intended to inform with detail
      x-swagger-router-controller: agentRoutes
      operationId: getState
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AboutState'
  /sensor/report:
    post:
      tags:
      - sensor
      summary: new data from sensor
      description: calls with update of data captured by a sensor
      x-swagger-router-controller: agentRoutes
      operationId: postSensorReport
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: sensor data
        required: true
        schema:
          $ref: '#/definitions/SensorReport'
      responses:
        '200':
          description: Successful report
          schema:
            $ref: '#/definitions/SensoReportResponse'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/SensoReportResponse'
  /sensor/start:
    post:
      tags:
      - sensor
      summary: sensor has started up
      description: called when a sensor starts up
      x-swagger-router-controller: agentRoutes
      operationId: postSensorStart
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: sensor start data
        required: true
        schema:
          $ref: '#/definitions/SensorStart'
      responses:
        '405':
          description: Invalid input
  /sensor/stop:
    post:
      tags:
      - sensor
      summary: sensor has stopped
      description: called when a sensor stops
      x-swagger-router-controller: agentRoutes
      operationId: postSensorStop
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: sensor stop data
        required: true
        schema:
          $ref: '#/definitions/SensorStop'
      responses:
        '405':
          description: Invalid input
  /sensor/priorReport:
    get:
      tags:
      - sensor
      summary: get prior sent report
      description: server keeps prior report posted
      x-swagger-router-controller: agentRoutes
      operationId: getSensorPriorReport
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SensorReport'
  /sensor/nextReport:
    get:
      tags:
      - sensor
      summary: get next report
      description: server accumulates report to be posted
      x-swagger-router-controller: agentRoutes
      operationId: getSensorNextReport
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SensorReport'
  /sensor/autoConfig:
    get:
      tags:
      - sensor
      summary: get automatic configuration information for specified sensorId
      description: something here
      x-swagger-router-controller: agentRoutes
      operationId: getSensorAutoConfig
      parameters:
      - name: sensorId
        in: query
        description: The id of the sensor requesting configuration
        required: true
        type: string
      - name: agentId
        in: query
        description: The id of the SynergyCheck agent requesting configuration from
        required: true
        type: string
      - name: customerId
        in: query
        description: foo
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SensorAutoConfig'
  /agent/startReports:
    get:
      tags:
      - agent
      summary: start sending agentReports from agent to synergyCheck
      description: something here
      x-swagger-router-controller: agentRoutes
      operationId: postStartReports
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
  /agent/stopReports:
    get:
      tags:
      - agent
      summary: stop sending agentReports from agent to synergyCheck
      description: something here
      x-swagger-router-controller: agentRoutes
      operationId: postStopReports
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
definitions:
  SensorReport: # what the sensor sends to the agent each reporting period
    type: object
    properties:
      snapshot:
        type: object
        properties:
          sensorId:
            type: string
          customerId:
            type: string
          timestamp:
            type: string
            format: datetime
          transactionId:
            type: string
          duration:
            type: string
          connections:
            type: array
            items:
              $ref: '#/definitions/SensorReportConnection'
      stats:
        type: object
        properties:
          netstat:
            type: object
            properties:
              performing: # Date.now() when netstat was started as is still running
                type: number
              disconnects: # of times a monitored interface was not found ESTABLISHED in netstat report
                type: number
              connects: # of netstat reports that match monitored ESTABLISHED interfaces
                type: number
              inReport: # of times a monitored interface was reported on by netstat
                type: number
              ran: # total # of times netstat ran (for computing avg)
                type: number
              time: # total millis netstat ran (for computing avg)
                type: number
              avgTime:
                type: number
              maxTime:
                type: number
              minTime:
                type: number
              minQuietToDisconnect:
                type: number
              maxQuietToDisconnect:
                type: number
          report:
            type: object
            properties:
              counter:
                type: number
              retries:
                type: number
              rekeys:
                type: number
              reconfig:
                type: number
  SensorReportConnection:
    type: object
    properties:
      interfaceUid:
        type: string
      charCount:
        type: integer
        format: int64
      packetCount:
        type: integer
        format: int64
      disconnected: # nmap says no connection exists between source and target
        type: boolean
      sourceNoPing: # source does not respond to ping
        type: boolean
      targetNoPing: # target does not respond to ping
        type: boolean
      lastMessageTimestamp: # not sure how useful this is - not being forwarded by Agent in agentReport
        type: string
        format: datetime
  SensoReportResponse:
    type: object
    properties:
      status:
        type: string
      errors:
        type: array
        items:
          type: object
      newConfig: # if true, then agent has a new configuration for the sensor to load
        type: boolean
  Ping:
    type: object
    properties:
      timestamp:
        type: string
        format: datetime
  SensorStart:
    type: object
    properties:
      sensorId:
        type: string
      timestamp:
        type: string
        format: datetime
      status:
        type: string
  SensorStop:
    type: object
    properties:
      sensorId:
        type: string
      timestamp:
        type: string
        format: datetime
      status:
        type: string
  ApiResponse:
    type: object
    properties:
      status:
        type: string
      errors:
        type: array
        items:
          type: string
      message:
        type: string
  AboutState:
    type: object
    properties:
      release:
        type: string
      autoConfig:
        type: boolean
      commandLine:
        type: array
        items:
          type: string
      configFile:
        type: string
      httpProtocol:
        type: string
      hostName:
        type: string
      port:
        type: string
      synergyCheck:
        $ref: '#/definitions/SynergyCheckConfig'
      agent:
        $ref: '#/definitions/AgentConfig'
      swagger:
        $ref: '#/definitions/SwaggerConfig'
      report:
        type: object
        properties:
          period:
            type: integer
            format: int64
      sensors:
        type: array
        items:
          $ref: '#/definitions/SensorConfig'
      verbose:
        type: boolean
      debug:
        type: boolean
      config:
        type: object
      protoHostPort:
        type: object
  SynergyCheckConfig:
    type: object
    properties:
      apiBase:
        type: string
      apiKeys:
        type: array
        items:
          type: string
      customerId:
        type: string
  AgentConfig:
    type: object
    properties:
      agentId:
        type: string
      created:
        type: object
  SwaggerConfig:
    type: object
    properties:
      swaggerFile:
        type: string
      httpProtocol:
        type: string
      hostName:
        type: string
  SensorConfig:
    type: object
    properties:
      version: # of configuration (increases once per saved update of sensor config)
        type: integer
        format: int64
      customer_id:
        type: string
      agent_id:
        type: string
      sensor_id:
        type: string
      name: # of sensor
        type: string
      device: # identifier of ethernet device to monitor (used by pcap)
        type: string
      deviceName: # external name of ethernet device being monitored (documentation only)
        type: string
      samplePeriod: # how often to sample traffic - can be miilis or string '10s'
        type: string
      connections:
        type: array
        items:
          $ref: '#/definitions/ConnectionConfig'
  ConnectionConfig:
    type: object
    properties:
      kind: # one of 'tcp/ip','web','file'
        type: string
      measure: # 'cc,pc,disc,snp,tnp'
        type: string
      src:
        type: string
      dst:
        type: string
      port:
        type: integer
        format: unsigned
      interfaceUid:
        type: string
      connection_id:
        type: string
        format: oid
  SensorAutoConfig:
    type: object
    properties:
      version: # of configuration (increases once per saved update of sensor config)
        type: integer
        format: int64
      customerId:
        type: string
      agentId:
        type: string
      sensorId:
        type: string
      name: # of sensor
        type: string
      device: # identifier of ethernet device to monitor
        type: string
      deviceName: # external name of ethernet device being monitored
        type: string
      locationId:
        type: # where the sensor is located
          string
      samplePeriod: # how often to sample traffic - can be miilis or string '10s'
        type: string
      connections:
        type: array
        items:
          $ref: '#/definitions/SensorAutoConfigConnection'
  SensorAutoConfigConnection:
    type: object
    properties:
      kind:
        type: string
      src:
        type: string
      dst:
        type: string
      port:
        type: integer
        format: int64
      connectionId:
        type: integer
        format: int64
  AgentReport:
    description: Generated by this server, acting as a client of SynergyCheck. For documentation purposes only!
    type: object
    properties:
      cid:
        type: string
        format: oid
      tx:
        type: string
        format: oid
      aid:
        type: string
        format: oid
      ts:
        type: string
        format: timestamp
      dur:
        type: string
        format: timeduration
      int:
        type: array
        items:
          $ref: '#/definitions/AgentReportInterface'
      proc:
        type: string
      err:
        type: string
  AgentReportInterface:
    type: object
    properties:
      cnid:
        type: string
        format: oid
      iid:
        type: string
      cc:
        type: number
      pc:
        type: number
      dis:
        type: boolean
      snp:
        type: boolean
      tnp:
        type: boolean
      ldts:
        type: string
        format: timestamp
      lcts:
        type: string
        format: timestamp
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'